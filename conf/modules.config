/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(":")[-1].tokenize("_")[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            pattern: "*_versions.yml"
        ]
    }

    // Files to be uploaded to the TreeVal JBrowse2 instance
    // .genome, .gz.{tbi|csi}, .bigBed, .bigWig, .paf
    withName: "GENERATE_GENOME|TABIX_BGZIPTABIX|UCSC_BEDTOBIGBED|UCSC_BEDGRAPHTOBIGWIG|BED2BW_NORMAL|BED2BW_AVGCOV|.*:SYNTENY:MINIMAP2_ALIGN|.*:.*:GENERATE_SORTED_GENOME:GNU_SORT|.*:.*:GENERATE_UNSORTED_GENOME:CUSTOM_GETCHROMSIZES" {
        publishDir = [
            path: { "${params.outdir}/treeval_upload" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    // Files to be stored along side the TreeVal files for access by curators
    // all are .bed
    withName: "PAF2BED|EXTRACT_COV_IDEN|FIND_HALF_COVERAGE|BEDTOOLS_MERGE_MAX|BEDTOOLS_MERGE_MIN" {
        publishDir = [
            path: { "${params.outdir}/treeval_upload/punchlists" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    // Files to be used for pretext, likely to be deleted once the hic workflow is complete.
    // .bed, .hr.pretext, .lr.pretext, needs centromere
    withName: 'GAWK_REFORMAT_INTERSECT|SEQTK_CUTN|GAWK_GAP_LENGTH|PRETEXT_INGEST_HIRES|PRETEXT_INGEST_SNDRD|COOLER_ZOOMIFY|COV_FOLDER|UCSC_BEDGRAPHTOBIGWIG|BED2BW_NORMAL|BED2BW_AVGCOV|EXTRACT_TELO|JUICER_TOOLS_PRE|SNAPSHOT_SRES|PRETEXT_GRAPH' {
        publishDir = [
            path: { "${params.outdir}/hic_files" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }


    withName: MERQURYFK_MERQURYFK {
        publishDir      = [
            path: { "${params.outdir}/hic_files" },
            mode: params.publish_dir_mode,
            pattern: "*.ref.spectra-cn.ln.png"
        ]
    }

    withName: FASTK_FASTK {
        publishDir      = [
            path: { "${params.outdir}/hic_files" },
            mode: params.publish_dir_mode,
            pattern: "*.ktab*"
        ]
    }

    //
    // MODULE CONFIGS
    //

    //
    // NOTE: GAWK module derivatives - More to come
    //
    withName: 'GAWK_UPPER_SEQUENCE' {
        ext.args2 = "'/^>/ {print; next} {print toupper(\$0)}'"  // Convert sequence to uppercase on lines starting with '>'
        ext.prefix = { "${meta.id}_UPPERCASED" }
        ext.suffix = 'fasta'
    }

    withName: 'GAWK_CLEAN_TELOMERE' {
        ext.args2 = "'/^>/'"        // Keep lines starting with '>'
        ext.prefix = { "${meta.id}_CLEANED" }
        ext.suffix = 'telomere'     // Must end with telomere otherwise FIND_TELOMERE_WINDOWS will crash
    }

    withName: 'GAWK_MAP_TELO' {
        ext.args2    = '''-v OFS="\\t" 'BEGIN { sub(/^>/, ""); print $1, $4, $5, $6 }' '''
        ext.prefix   = { "${meta.id}_map_telo" }
        ext.suffix   = 'bed'
    }

    withName: 'GAWK_GAP_LENGTH' {
        ext.args2 = "'BEGIN { OFS = \"\\t\" }{print \$0, sqrt((\$3-\$2)*(\$3-\$2))}'"
        ext.prefix = { "${meta.id}.gap" }
        ext.suffix = 'bedgraph'
    }

    withName: 'GAWK_REPLACE_DOTS' {
        ext.args2 = "'{ gsub(/\\./, \"0\"); print}'"
        ext.prefix = { "${meta.id}_nodot" }
        ext.suffix = 'bed'
    }

    withName: 'GAWK_RENAME_IDS' {
        ext.args2 = "'{ gsub(/\\./, \"0\"); print}'"
        extraIndex = { "${meta.id}_renamed" } // TODO: Fix me: this isn't a directive.
        ext.suffix = 'bed'
    }

    withName: 'GAWK_REFORMAT_INTERSECT' {
        ext.args2   = "'{ gsub(/\\./, \"0\"); printf \"%s\\t%.0f\\n\", \$0, sqrt((\$3 - \$2) * (\$3 - \$2))}'"
        ext.prefix  = { "${meta.id}_repeat_mk" }
        ext.suffix  = 'bed'
    }

    withName: 'GAWK_EXTRACT_BUSCOGENE' {
        ext.prefix  = { "${meta.id}_buscogene" }
        ext.suffix  = 'csv'
    }

    //
    // SUBWORKFLOW: MULTIPLE SUBWORKFLOWS
    //
    withName: BEDTOOLS_SORT {
        ext.prefix      = { "${meta.id}.sorted" }
    }

    withName: '.*:SELFCOMP:BEDTOOLS_SORT' {
        ext.prefix      = { "${meta.id}.selfcomp.sorted" }
    }

    withName: '.*:GEN_ALIGNMENTS:BEDTOOLS_SORT' {
        ext.prefix      = { "${meta.id}.gen.sorted" }
    }

    withName: '.*:.*:CDS_ALIGNMENTS:BEDTOOLS_SORT' {
        ext.prefix      = { "${meta.id}.cds.sorted" }
    }

    withName: '.*:.*:RNA_ALIGNMENTS:BEDTOOLS_SORT' {
        ext.prefix      = { "${meta.id}.rna.sorted" }
    }

    withName: ".*:.*:PEP_ALIGNMENTS:BEDTOOLS_SORT" {
        ext.prefix      = { "${meta.id}.prot.sorted" }
    }

    withName: ".*:BUSCO_ANNOTATION:BEDTOOLS_SORT" {
        ext.prefix      = { "${meta.id}.busco.sorted" }
    }

    withName: ".*:.*:ANCESTRAL_GENE:BEDTOOLS_SORT" {
        ext.prefix      = { "${meta.id}.ancestral.sorted" }
    }

    //
    // BAMTOBED_SORT Block
    //
    withName: ".*:HIC_MAPPING:HIC_BAMTOBED_COOLER:BAMTOBED_SORT" {
        ext.prefix      = { "${meta.id}.cooler.sorted" }
    }

    withName: ".*:HIC_MAPPING:HIC_BAMTOBED_JUICER:BAMTOBED_SORT" {
        ext.prefix      = { "${meta.id}.juicer.sorted" }
    }

    //
    // SUBWORKFLOW: SELFCOMP
    //
    withName : MUMMER {
        ext.args        = "-n -b -c -L -l 400"
        ext.prefix      = { "${meta.id}" }
    }


    //
    // SUBWORKFLOW: REPEAT_DENSITY
    //
    withName: GNU_SORT_A {
        ext.args        = { "-k1,1 -k2,2n -S${task.memory.mega - 100}M -T ." }
        ext.suffix      = { "intersect" }
    }

    withName: GNU_SORT_B {
        ext.args        = { "-k1,1 -k2,2n -S${task.memory.mega - 100}M -T ." }
        ext.suffix      = { "sorted.genome" }
    }

    withName: GNU_SORT_C {
        ext.args        = { "-k1,1 -k2,2n -S${task.memory.mega - 100}M -T ." }
        ext.suffix      = { "bins" }
    }

    withName: BEDTOOLS_MAKEWINDOWS {
        ext.args        = { "-w 10000" }
    }

    withName: BEDTOOLS_INTERSECT {
        ext.prefix      = { "${meta.id}_INTERSECT" }
    }

    withName: BEDTOOLS_MAP {
        ext.prefix      = { "${meta.id}_MAPPED" }
        ext.args        = { "-c 4 -o sum" }
    }

    withName: ".*:REPEAT_DENSITY:UCSC_BEDGRAPHTOBIGWIG" {
        ext.prefix      = { "${meta.id}_repeat_density" }
    }

    withName: ".*:REPEAT_DENSITY:TABIX_BGZIPTABIX" {
        ext.prefix      = { "repden_${meta.id}" }
        ext.args        = ""
        ext.args2       = { "--csi" }
    }


    //
    // SUBWORKFLOW: GAP_FINDER
    //
    withName: SEQTK_CUTN {
        ext.args        = "-n 1"
        ext.prefix      = { "${meta.id}_gap" }
    }

    withName: ".*:GAP_FINDER:TABIX_BGZIPTABIX" {
        ext.prefix      = { "gap_${meta.id}" }
        ext.args        = ""
        ext.args2       = { "--csi" }
    }


    //
    // SUBWORKFLOW: GENE ALIGNMENTS
    //
    withName: MINIPROT_ALIGN {
        ext.args        = " --gff -j1 -ut16 --gff-delim='#' --outc 0.5 --outs 0.9"
    }

    withName: ".*:.*:(GEN_ALIGNMENTS|RNA_ALIGNMENTS|CDS_ALIGNMENTS):MINIMAP2_ALIGN" {
        ext.args        = {"-x splice ${meta.intron_size ? "-G ${meta.intron_size}" : "" } ${reference.size() > 2.5e9 ? (" -I " + Math.ceil(reference.size()/1e9)+"G") : ""} "}
        ext.args2       = { "-T ${meta.id}_tmp" }
        ext.prefix      = { "${meta.id}_alignment_${reference.getName().tokenize(".")[0]}" }
    }

    withName: ".*:.*:(GEN_ALIGNMENTS|RNA_ALIGNMENTS|CDS_ALIGNMENTS):BEDTOOLS_BAMTOBED" {
        ext.args        = "-bed12"
    }

    withName: ".*:.*:(GEN_ALIGNMENTS|RNA_ALIGNMENTS|CDS_ALIGNMENTS):UCSC_BEDTOBIGBED" {
        ext.prefix      = { "${meta.id}_${meta.type}" }
    }

    withName: ".*:.*:PEP_ALIGNMENTS:TABIX_BGZIPTABIX" {
        ext.prefix      = { "pep_${meta.id}" }
        ext.args2       = { "--csi" }
    }

    //
    // SUBWORKFLOW: INSILICO_DIGEST
    //
    withName: ".*:INSILICO_DIGEST:UCSC_BEDTOBIGBED" {
        ext.args        = { "-type=bed4+1 -extraIndex=length" }
        ext.prefix      = { "${meta.id}" }
    }

    //
    // SUBWORKFLOW: SELFCOMP
    //
    withName: ".*:SELFCOMP:UCSC_BEDTOBIGBED" {
        ext.args        = { " -type=bed3+3 -extraIndex=qName,qStart,qEnd" }
        ext.prefix      = { "${meta.id}_selfcomp" }
    }

    withName: ".*:SELFCOMP:CAT_CAT" {
        ext.args        = ""
    }

    withName: "SEQKIT_SPLIT_REF" {
        ext.args        = { " -p ${meta.cn} --by-part-prefix ref_chunk --out-dir refchunks "}
        ext.prefix      = { "${meta.id}_ref" }
    }

    withName: "SEQKIT_SPLIT_QUERY" {
        ext.args        = { " -p ${meta.cn} --by-part-prefix query_chunk --out-dir querychunks "}
        ext.prefix      = { "${meta.id}_ref" }
    }

    //
    // SUBWORKFLOW: SYNTENY
    //
    withName: ".*:SYNTENY:MINIMAP2_ALIGN" {
        ext.args        = "-t 8 -x asm10"
        ext.args2       = { "-T ${meta.id}_tmp" }
        ext.prefix      = { "${meta.id}_synteny_${reference.getName().tokenize(".")[0]}" }
    }


    //
    // SUBWORKFLOW: READ_COVERAGE
    //
    withName: ".*:READ_COVERAGE:MINIMAP2_ALIGN" {
        ext.args = {"-x ${meta.readtype.equals("hifi") ? "map-hifi" : meta.readtype.equals("clr") ? "map-pb" : meta.readtype.equals("ont") ? "map-ont" : meta.readtype.equals("illumina") ? "sr" : ""} -N 1 -c ${reference.size() > 2.5e9 ? (" -I" + Math.ceil(reference.size()/1e9)+"G") : ""}" }
        ext.prefix  = { "${meta.id}_alignment_${reads.getName().split('.fasta.gz|.fa.gz')[0]}" }
    }

    withName: ".*:READ_COVERAGE:BEDTOOLS_GENOMECOV" {
        ext.args        = "-bga -split"
        ext.prefix      = { "${meta.id}_genome2cov" }
    }

    withName: ".*:READ_COVERAGE:BEDTOOLS_MERGE_MAX" {
        ext.args        = "-d 50"
        ext.prefix      = { "maxdepth" }
    }

    withName: ".*:READ_COVERAGE:BEDTOOLS_MERGE_MIN" {
        ext.args        = "-d 50"
        ext.prefix      = { "zerodepth" }
    }

    withName: ".*:READ_COVERAGE:GNU_SORT_BED" {
        ext.args        = { "-k1,1 -k2,2n -S${task.memory.mega - 100}M -T ." }
        ext.prefix      = { "${meta.id}_sorted" }
    }

    withName: ".*:READ_COVERAGE:GNU_SORT_COVBED" {
        ext.args        = { "-k1,1 -k2,2n -S${task.memory.mega - 100}M -T ." }
        ext.prefix      = { "${meta.id}_sorted_cov" }
    }

    withName: ".*:READ_COVERAGE:BED2BW_NORMAL" {
        ext.prefix      = { "${meta.id}_coverage_normal" }
    }

    withName: ".*:READ_COVERAGE:BED2BW_AVGCOV" {
        ext.prefix      = { "${meta.id}_coverage_avg" }
    }

    //
    // SUBWORKFLOW: TELOMERE
    //
    withName: "FIND_TELOMERE_REGIONS" {
        ext.find_telomere       = "find_telomere"
    }

    withName: "FIND_TELOMERE_WINDOWS" {
        ext.telomere_jar        = "telomere.jar"
        ext.telomere_jvm_params = "-Xms1g -Xmx1g"
    }

    withName: ".*:TELO_FINDER:TABIX_BGZIPTABIX" {
        ext.prefix      = { "telo_${meta.id}" }
        ext.args2       = { "--csi" }

    }


    //
    // SUBWORKFLOW: BUSCO
    //
    withName: ".*:BUSCO_ANNOTATION:UCSC_BEDTOBIGBED" {
        ext.args        = { "-type=bed3+4 -extraIndex=name,OrthoDBurl" }
        ext.prefix      = { "${meta.id}_buscogene" }
    }

    withName: ".*:.*:ANCESTRAL_GENE:UCSC_BEDTOBIGBED" {
        ext.args        = { "-type=bed3+4 -extraIndex=name,OrthoDBurl" }
        ext.prefix      = { "${meta.id}_ancestral" }
    }

    withName: "BUSCO_BUSCO" {
        ext.args        = "--offline --metaeuk"
    }


    //
    // SUBWORKFLOW: HIC MAPPING
    // normal = standard run, pi = "pre-ingestion", hr = High res
    //
    withName: PRETEXTMAP_STANDRD {
        ext.args        = { "${meta.map_order.equals("length") ? "--sortby length": "--sortby nosort" } --mapq 0 --memory ${task.memory.giga}" }
        ext.prefix      = { "${meta.id}_normal_pi" }
    }

    withName: PRETEXTMAP_HIGHRES {
        ext.args        = { "${meta.map_order.equals("length") ? "--sortby length": "--sortby nosort" } --highRes --mapq 0" }
        ext.prefix      = { "${meta.id}_hr_pi" }
    }

    withName: "PRETEXT_INGEST_SNDRD" {
        ext.args        = { "--textureBuffer 1G" }
        ext.prefix      = { "${meta.id}_normal" }
    }

    withName: "PRETEXT_INGEST_HIRES" {
        ext.args        = { "--textureBuffer 1G" }
        ext.prefix      = { "${meta.id}_hr" }
    }


    withName: YAHS {
        publishDir      = [
            path: { "${params.outdir}/hic_files/alignment_bin" },
            mode: params.publish_dir_mode
        ]
    }


    withName: "SNAPSHOT_SRES" {
        ext.args        = { "--sequences '=full' --resolution 1440" }
        ext.prefix      = { "${meta.id}_normal" }
    }


    withName: JUICER_TOOLS_PRE {
        ext.juicer_tools_jar    = "juicer_tools.1.8.9_jcuda.0.8.jar"
        ext.juicer_jvm_params   = "-Xms1g -Xmx36g"
    }

    withName: COOLER_CLOAD {
        ext.args        = "pairs -0 -c1 3 -p1 4 -c2 7 -p2 8"
    }

    withName: ".*:.*:(HIC_BAMTOBED_COOLER|HIC_BAMTOBED_JUICER):SAMTOOLS_MARKDUP" {
        ext.prefix      = { "${meta.id}_mkdup" }
    }

    withName: ".*:.*:HIC_BWAMEM2:CRAM_FILTER_ALIGN_BWAMEM2_FIXMATE_SORT" {
        ext.args        = ""
        ext.args1       = "-F0xB00 -nt"
        ext.args2       = { "-5SPCp -H'${rglines}'" }
        ext.args3       = "-mpu"
        ext.args4       = { "--write-index -l1" }
    }

    withName: ".*:.*:HIC_BWAMEM2:SAMTOOLS_MERGE" {
        ext.prefix      = { "${meta.id}_hic_bwamem2_merge" }
    }

    withName: ".*:.*:HIC_MINIMAP2:CRAM_FILTER_MINIMAP2_FILTER5END_FIXMATE_SORT" {
        ext.args        = ""
        ext.args1       = ""
        ext.args2       = { "-ax sr" }
        ext.args3       = "-mpu"
        ext.args4       = { "--write-index -l1" }
    }

    withName: ".*:.*:HIC_MINIMAP2:SAMTOOLS_MERGE" {
        ext.prefix      = { "${meta.id}_hic_minimap2_merge" }
    }

    withName: ".*:.*:GENERATE_SORTED_GENOME:GNU_SORT" {
        ext.prefix      = { "${meta.id}_len_sorted" }
        ext.suffix      = { "genome" }
        ext.args        = { "-k2,2 -nr -S${task.memory.mega - 100}M -T ." }
    }

    withName: ".*:.*:HIC_MINIMAP2:MINIMAP2_INDEX" {
        ext.args        = { "${fasta.size() > 2.5e9 ? (" -I " + Math.ceil(fasta.size()/1e9)+"G") : ""} "}
    }

    //
    // SUBWORKFLOW: KMER
    //
    withName: ".*:KMER:CAT_CAT" {
        ext.prefix      = { "${meta.id}_merged.fasta.gz" }
    }

    withName: ".*:KMER:FASTK_FASTK" {
        ext.args        = "-k31 -t -P."
    }

    withName: MERQURYFK_MERQURYFK {
        ext.args        = "-P."
    }

    withName: AVG_COV {
        ext.args    = "-T ./"
    }

}
