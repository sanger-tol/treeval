/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    sanger-tol/treeval Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { 1      * task.attempt }
    memory = { 6.GB   * task.attempt }
    time   = { 4.h    * task.attempt }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and reuse the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors

    withLabel:process_single {
        cpus   = { 1                   }
        memory = { 6.GB * task.attempt }
        time   = { 4.h  * task.attempt }
    }

    withLabel:process_low {
        cpus   = { 2     * task.attempt }
        memory = { 12.GB * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withLabel:process_medium {
        cpus   = { 6     * task.attempt }
        memory = { 36.GB * task.attempt }
        time   = { 8.h   * task.attempt }
    }

    withLabel:process_high {
        cpus   = { 12    * task.attempt }
        memory = { 72.GB * task.attempt }
        time   = { 16.h  * task.attempt }
    }

    withLabel:process_long {
        time   = { 20.h  * task.attempt }
    }

    withLabel:process_high_memory {
        memory = { 200.GB * task.attempt }
    }

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }

    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    // CUSTOM CONFIGS

    // NOTE: For processes that grab files or generate csv
    withLabel:process_tiny {
        cpus   = { 1 }
        memory = { 100.MB * task.attempt }
        time   = { 4.h    * task.attempt }
    }

    withLabel:process_small {
        cpus   = { 1 }
        memory = { 2.GB * task.attempt }
        time   = { 4.h  * task.attempt }
    }

    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }

    // IN CASES WHERE THERE IS ONE HIC FILE THIS WILL NEED ALMOST NOTHING
    withName:SAMTOOLS_MERGE {
        cpus    = { 16    * 1 }
        memory  = { 50.GB * task.attempt }
        time    = { 30.h  * task.attempt }
    }

    // RESOURCES: MEMORY INTENSIVE STEPS, SOFTWARE TO BE UPDATED TO COMBAT THIS
    withName: '.*:.*:SELFCOMP:SELFCOMP_MUMMER2BED' {
        cpus    = { 10   * task.attempt }
        memory  = { 1.GB * Math.ceil( mummerfile.size() / 1e+9 ) * task.attempt }
        time    = { 12.h * task.attempt }
    }

    withName: '.*:.*:SELFCOMP:SELFCOMP_MAPIDS' {
        cpus    = { 10   * task.attempt }
        memory  = { 1.GB * Math.ceil( bed.size() / 1e+9 ) * task.attempt }
        time    = { 12.h * task.attempt }
    }

    // def counted = {x, y ->
        // To avoid calculating the countLines multiple times
        // Cant use countlines directly on the file otherwise raises a java.nio.file.ProviderMismatchError
    //    return (x**2) * Math.log(y)
    //}

    withName: BEDTOOLS_SORT {
        memory  = { 15.GB * (task.attempt * task.attempt) }
    }

    withName: SELFCOMP_ALIGNMENTBLOCKS {
        cpus    = { 20   * task.attempt }
        memory  = { 1.GB * (Math.ceil((bedfile.size() / 1e+9) * 30) * Math.ceil(task.attempt * 1)) }
        time    = { 18.h * task.attempt }
    }

    // RESOURCES: CHANGES TO FREQUENT FAILURES BELOW THIS MEM POINT
    withName: '.*:.*:GENE_ALIGNMENT:.*:MINIPROT_ALIGN' {
        cpus   = { 6    * task.attempt }
        memory = { 1.GB * ( ref.size() < 2e9 ? 50 : Math.ceil( ( ref.size() / 1e+9 ) * 20 ) * Math.ceil( task.attempt * 1 ) ) }
        time   = { 10.h * task.attempt }
    }

    withName: '.*:.*:GENE_ALIGNMENT:.*:MINIMAP2_ALIGN' {
        cpus   = { 6    * task.attempt }
        memory = { 1.GB * ( reference.size() < 2e9 ? 70 : Math.ceil( ( reference.size() / 1e+9 ) * 50 ) * Math.ceil( task.attempt * 1 ) ) }
        time   = { 10.h * task.attempt }
    }

    withName: '.*:.*:GENE_ALIGNMENT:.*:MINIPROT_INDEX' {
        cpus   = { 6    * task.attempt }
        memory = { 1.GB * ( fasta.size() < 2e9 ? 50 : Math.ceil( ( fasta.size() / 1e+9 ) * 10 ) * Math.ceil( task.attempt * 1 ) ) }
        time   = { 10.h * task.attempt }
    }

    // Standard parameters, covers most insecta. However the memory should be approx 10 * genome size
    withName: '.*:.*:READ_COVERAGE:MINIMAP2_ALIGN' {
        cpus    = { 20   * 1 }
        memory  = { 1.GB * ( reference.size() < 2e9 ? 50 : Math.ceil( ( reference.size() / 1e+9 ) * 2.5 ) * Math.ceil( task.attempt * 1 ) ) }
        time    = { 1.h  * ( reference.size() < 1e9 ? 10 : reference.size() < 10e9 ? 30 : 48) }
    }

    withName: '.*:.*:READ_COVERAGE:BEDTOOLS_GENOMECOV' {
        memory = { 6.GB * (task.attempt * task.attempt) }
        time   = { 12.h * task.attempt }
    }

    // 25GB * (task attempt * 2) = 50GB, 100GB, 150GB
    withName:MUMMER {
        cpus   = { 12 * task.attempt }
        // increase memory allocation by fold change of genome size, approx about 10 * ref.size(), max 15 folds
        memory = { 1.GB * Math.ceil( 15 * ref.size() / 1e+9 ) * task.attempt }
    }

    withName:UCSC_BEDGRAPHTOBIGWIG {
        cpus   = { 2    * task.attempt }
        memory = { 1.GB * Math.ceil( bedgraph.size() / 1e+9 ) * task.attempt }
    }
    withName: CRAM_FILTER_ALIGN_BWAMEM2_FIXMATE_SORT {
        cpus    = { 16   * 1 }
        memory  = { 1.GB * ( reference.size() < 2e9 ? 80 : Math.ceil( ( reference.size() / 1e+9 ) * 30 ) * Math.ceil( task.attempt * 1 ) ) }
    }

    withName: CRAM_FILTER_MINIMAP2_FILTER5END_FIXMATE_SORT {
        cpus    = { 16   * 1 }
        memory  = { 1.GB * ( reference.size() < 2e9 ? 50 : Math.ceil( ( reference.size() / 1e+9 ) * 3 ) * Math.ceil( task.attempt * 1 ) ) }
    }

    withName: SNAPSHOT_SRES {
        cpus    = { 1    * task.attempt }
        memory  = { 1.GB * task.attempt }
    }

    withName: PRETEXTMAP_STANDRD{
        cpus    = { 8 * 1 }
        memory  = { 3.GB * task.attempt }
        time    = { 1.h  * ( ( fasta.size() < 4e9 ? 24 : 48 ) * task.attempt ) }
    }

    withName: PRETEXTMAP_HIGHRES {
        cpus    = { 6     * task.attempt }
        memory  = { 20.GB * Math.ceil( task.attempt * 2.6 ) }
        time    = { 1.h  * ( ( fasta.size() < 4e9 ? 24 : 48 ) * task.attempt ) }
    }

    withName: PRETEXT_GRAPH {
        memory  = { 128.MB * Math.ceil( task.attempt * 1.5 ) }
    }

    withName: JUICER_TOOLS_PRE {
        cpus    = { 20     * task.attempt }
        memory  = { 100.GB * task.attempt }
    }

    withName: BWAMEM2_INDEX {
        memory  = { 1.GB * Math.ceil( 28 * fasta.size() / 1e+9 ) * task.attempt }
    }

    withName: MINIMAP2_INDEX {
        cpus    = { 2    * task.attempt }
        memory  = { 1.GB * Math.ceil( 4 * fasta.size() / 1e+9 ) * task.attempt }
    }

    // add a cpus 16 if bam.size() >= 50GB
    withName: BAMTOBED_SORT {
        cpus    = { 12 }
        memory = {
            (bam.size() < 100e9 ? 60.GB :  // If <100GB -> 60GB fixed
            // If 100-150GB -> 50GB + (BAM/4GB)
            // If >150GB -> BAM/4GB
                (bam.size() <= 150e9 ?
                    50.GB + (1.GB * Math.ceil(bam.size() / 4e9)) :
                    1.GB * Math.ceil(bam.size() / 4e9)
                )
            ) * Math.ceil(task.attempt * 1)
        }
        time    = { 30.h      * task.attempt }
    }

    withName: SAMTOOLS_MARKDUP {
        cpus    = { 12   * 1 }
        memory  = { 1.GB * Math.ceil( ( (input.size() / 1e9) / 4 ) ) * task.attempt }
    }

    withName: COOLER_CLOAD {
        cpus   = { 16    * 1 }
        memory = { 20.GB * task.attempt }
    }

    withName: MERQURYFK_MERQURYFK {
        cpus   = { 20     * 1 }
        memory = { 100.GB * task.attempt }
    }

    withName: BUSCO_BUSCO {
        cpus   = { 16    * task.attempt }
        memory = { 50.GB * task.attempt }
        time   = { 20.h  * task.attempt }
    }

    // Large Genomes > 4Gb
    //withName: BUSCO_BUSCO {
    //    cpus   = {  30      * task.attempt    ) }
    //    memory = {  100.GB  * task.attempt  ) }
    //    time   = {  300.h   * task.attempt    ) }
    //}

    // Large Genomes > 4Gb
    withName: FASTK_FASTK {
        cpus   = { 8         * task.attempt }
        memory = { 100.GB    * task.attempt }
    }

    //
    // GENERAL MODULE LIMITS
    //      Based on reports from SummaryStats
    //      Most of the final conversion modules barely use any resources
    withName: UCSC_BEDTOBIGBED {
        cpus   = { 1 }
        memory = { 2.GB * task.attempt }
    }

    withName: TABIX_BGZIPTABIX {
        cpus   = { 1 }
        memory = { 1.GB * Math.ceil( (input.size() / 2e+9) < 1 ? 1 : (input.size() / 2e+9) ) * task.attempt }
    }

    //
    // SUBWORKFLOW: GAP_FINDER
    //      Based on reports from SummaryStats
    withName: GAWK_GAP_LENGTH {
        cpus   = { 1                        }
        memory = { 100.MB * task.attempt    }
    }

    //
    // SUBWORKFLOW: HIC_MAPPING
    //
    withName: GET_PAIRED_CONTACT_BED {
        cpus   = { (file.size() > 1e11 ? 12 : 6) }
        memory = { 10.GB * task.attempt }
        //memory = { 1.GB * Math.ceil( file.size() / 2e+9 ) * task.attempt }
        time   = { 30.h * task.attempt }
    }

    //
    // SUBWORKFLOW: SYNTENY
    //
    withName: '.*:.*:SYNTENY:MINIMAP2_ALIGN' {
        cpus    = { 20     * 1 }
        memory  = { 1.1.GB * Math.ceil( (reference.size() / 1e+9) * 30 ) * task.attempt }
        time    = { 20.h   * task.attempt }
    }

    //
    // SUBWORKFLOW: REPEAT_DENSITY
    //

    withName: WINDOWMASKER_MKCOUNTS {
        cpus   = { 6 }
        memory = { 1.5.GB * Math.ceil( ref.size() / 1e+9 ) * task.attempt }
        time   = { 10.h   * task.attempt }
    }

    withName: WINDOWMASKER_USTAT {
        cpus   = { 1 }
        memory = { 1.GB * Math.ceil( ref.size() / 2e+9 ) * task.attempt }
        time   = { 4.h  * task.attempt }
    }

    withName: BEDTOOLS_INTERSECT {
        memory  = { 6.GB * (task.attempt * task.attempt) }
    }

    withName: GENERATE_CRAM_CSV {
        cpus   = { 6 }
        memory = { 30.GB * task.attempt }
        time   = { 10.h  * task.attempt }
    }
}
