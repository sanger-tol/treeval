/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    sanger-tol/treeval Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {
    cpus   = { check_max( 1             * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB          * task.attempt, 'memory' ) }
    time   = { check_max( 4.h           * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors

    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }

    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    // CUSTOM CONFIGS

    // NOTE: For processes that grab files or generate csv
    withLabel:process_tiny {
        cpus   = { check_max( 1                         , 'cpus'    ) }
        memory = { check_max( 100.MB    * task.attempt  , 'memory'  ) }
        time   = { check_max( 4.h       * task.attempt  , 'time'    ) }
    }

    withLabel:process_small {
        cpus   = { check_max( 1                         , 'cpus'    ) }
        memory = { check_max( 2.GB      * task.attempt  , 'memory'  ) }
        time   = { check_max( 4.h       * task.attempt  , 'time'    ) }
    }

    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }

    // IN CASES WHERE THERE IS ONE HIC FILE THIS WILL NEED ALMOST NOTHING
    withName:SAMTOOLS_MERGE {
        cpus    = { check_max( 16        * 1, 'cpus'  ) }
        memory  = { check_max( 50.GB     * task.attempt, 'memory') }
        time    = { check_max( 30.h     * task.attempt, 'time') }
    }

    // RESOURCES: MEMORY INTENSIVE STEPS, SOFTWARE TO BE UPDATED TO COMBAT THIS
    withName: '.*:.*:SELFCOMP:SELFCOMP_MUMMER2BED' {
        cpus    = { check_max( 10       * task.attempt, 'cpus'      ) }
        memory  = { check_max( 1.GB     * Math.ceil( mummerfile.size() / 1e+9 )    * task.attempt, 'memory'    ) }
        time    = { check_max( 12.h     * task.attempt, 'time'      ) }
    }

    withName: '.*:.*:SELFCOMP:SELFCOMP_MAPIDS' {
        cpus    = { check_max( 10       * task.attempt, 'cpus'      ) }
        memory  = { check_max( 1.GB     * Math.ceil( bed.size() / 1e+9 )    * task.attempt, 'memory'    ) }
        time    = { check_max( 12.h     * task.attempt, 'time'      ) }
    }

    // def counted = {x, y ->
        // To avoid calculating the countLines multiple times
        // Cant use countlines directly on the file otherwise raises a java.nio.file.ProviderMismatchError
    //    return (x**2) * Math.log(y)
    //}

    withName: BEDTOOLS_SORT {
        memory  = { check_max( 15.GB    * (task.attempt * task.attempt), 'memory'    ) }
    }

    withName: SELFCOMP_ALIGNMENTBLOCKS {
        cpus    = { check_max( 20       * task.attempt, 'cpus'      ) }
        memory  = { check_max( 1.GB     * (  Math.ceil( ( bedfile.size() / 1e+9 ) * 30 ) * Math.ceil( task.attempt * 1 )   ) , 'memory'  ) }
        time    = { check_max( 18.h     * task.attempt, 'time'      ) }
    }

    // RESOURCES: CHANGES TO FREQUENT FAILURES BELOW THIS MEM POINT
    withName: '.*:.*:GENE_ALIGNMENT:.*:MINIPROT_ALIGN' {
        cpus   = { check_max( 6        * task.attempt, 'cpus'    ) }
        memory = { check_max( 1.GB     * ( ref.size() < 2e9 ? 50 : Math.ceil( ( ref.size() / 1e+9 ) * 20 ) * Math.ceil( task.attempt * 1 ) ) , 'memory') }
        time   = { check_max( 10.h     * task.attempt, 'time'    ) }
    }

    withName: '.*:.*:GENE_ALIGNMENT:.*:MINIMAP2_ALIGN' {
        cpus   = { check_max( 6        * task.attempt, 'cpus'    ) }
        memory = { check_max( 1.GB     * ( reference.size() < 2e9 ? 70 : Math.ceil( ( reference.size() / 1e+9 ) * 50 ) * Math.ceil( task.attempt * 1 ) ) , 'memory') }
        time   = { check_max( 10.h     * task.attempt, 'time'    ) }
    }

    withName: '.*:.*:GENE_ALIGNMENT:.*:MINIPROT_INDEX' {
        cpus   = { check_max( 6        * task.attempt, 'cpus'    ) }
        memory = { check_max( 1.GB     * ( fasta.size() < 5e9 ? 50 : Math.ceil( ( fasta.size() / 1e+9 ) * 10 ) * Math.ceil( task.attempt * 1 ) ) , 'memory') }
        time   = { check_max( 10.h     * task.attempt, 'time'    ) }
    }

    // Standard parameters, covers most insecta. However the memory should be approx 10 * genome size
    withName: '.*:.*:READ_COVERAGE:MINIMAP2_ALIGN' {
        cpus    = { check_max( 20       * 1, 'cpus'                 ) }
        memory  = { check_max( 1.GB     * ( reference.size() < 5e9 ? 50 : Math.ceil( ( reference.size() / 1e+9 ) * 10 ) * Math.ceil( task.attempt * 1 ) ) , 'memory') }
        time    = { check_max( 1.h      * ( reference.size() < 1e9 ? 10 : reference.size() < 10e9 ? 30 : 48), 'time'      ) }
    }

    withName: '.*:.*:READ_COVERAGE:BEDTOOLS_GENOMECOV' {
        memory = { check_max( 6.GB      * (task.attempt *   task.attempt) , 'memory'  ) }
        time   = { check_max( 12.h      * task.attempt, 'time'    ) }
    }

    // 25GB * (task attempt * 2) = 50GB, 100GB, 150GB
    withName:MUMMER {
        cpus    = { check_max( 12       * task.attempt, 'cpus'                      ) }
        // increase memory allocation by fold change of genome size, approx about 10 * ref.size(), max 15 folds
        memory = { check_max( 1.GB      * Math.ceil( 15 * ref.size() / 1e+9 ) * task.attempt, 'memory' ) }
    }

    withName:UCSC_BEDGRAPHTOBIGWIG {
        cpus   = { check_max( 2        * task.attempt, 'cpus'   ) }
        memory = { check_max( 1.GB     * Math.ceil( bedgraph.size() / 1e+9 )    * task.attempt, 'memory' ) }
    }
    withName: CRAM_FILTER_ALIGN_BWAMEM2_FIXMATE_SORT {
        cpus    = { check_max( 16       * 1                                                 , 'cpus'   ) }
        memory  = { check_max( 1.GB     * ( reference.size() < 2e9 ? 80 : Math.ceil( ( reference.size() / 1e+9 ) * 30 ) * Math.ceil( task.attempt * 1 ) ) , 'memory') }
    }

    withName: CRAM_FILTER_MINIMAP2_FILTER5END_FIXMATE_SORT {
        cpus    = { check_max( 16       * 1                                                            , 'cpus'   ) }
        memory  = { check_max( 1.GB     * ( reference.size() < 5e9 ? 50 : Math.ceil( ( reference.size() / 1e+9 ) * 10 ) * Math.ceil( task.attempt * 1 ) ) , 'memory') }
    }

    withName: SNAPSHOT_SRES {
        cpus    = { check_max( 1        * task.attempt, 'cpus'   ) }
        memory  = { check_max( 1.GB     * task.attempt, 'memory' ) }
    }

    withName: PRETEXTMAP_STANDRD{
        cpus    = { check_max( 8        * 1, 'cpus'   ) }
        memory  = { check_max( 3.GB     * task.attempt, 'memory' ) }
        time   =  { check_max( 1.h      * ( ( fasta.size() < 4e9 ? 24 : 48 ) * Math.ceil( task.attempt * 1 ) ), 'time'    ) }
    }

    withName: PRETEXTMAP_HIGHRES {
        cpus    = { check_max( 6       * task.attempt, 'cpus'   ) }
        memory  = { check_max( 20.GB     * Math.ceil( task.attempt * 2.6 ), 'memory' ) }
        time   =  { check_max( 1.h      * ( ( fasta.size() < 4e9 ? 24 : 48 ) * Math.ceil( task.attempt * 1 ) ), 'time'    ) }
    }

    withName: PRETEXT_GRAPH {
        memory  = { check_max( 128.MB   * Math.ceil( task.attempt * 1.5 ), 'memory' ) }
    }

    withName: JUICER_TOOLS_PRE {
        cpus    = { check_max( 20       * task.attempt, 'cpus'   ) }
        memory  = { check_max( 100.GB   * task.attempt, 'memory' ) }
    }

    withName: BWAMEM2_INDEX {
        memory  = { check_max( 1.GB * Math.ceil( 28 * fasta.size() / 1e+9 ) * task.attempt, 'memory' ) }
    }

    withName: MINIMAP2_INDEX {
        cpus    = { check_max( 2    * task.attempt, 'cpus'    ) }
        memory  = { check_max( 1.GB * ( fasta.size() < 3e9 ? 30 : Math.ceil( ( fasta.size() / 1e+9 ) * 10 ) * Math.ceil( task.attempt * 1 ) ) , 'memory') }
    }

    // add a cpus 16 if bam.size() >= 50GB
    withName: BAMTOBED_SORT {
        cpus    = { check_max( 12     * 1, 'cpus'    ) }
        memory = {
            check_max(
                (bam.size() < 100e9 ? 60.GB :  // If <100GB -> 60GB fixed
                // If 100-150GB -> 50GB + (BAM/4GB)
                // If >150GB -> BAM/4GB
                    (bam.size() <= 150e9 ?
                        50.GB + (1.GB * Math.ceil(bam.size() / 4e9)) :
                        1.GB * Math.ceil(bam.size() / 4e9)
                    )
                ) * Math.ceil(task.attempt * 1),
            'memory'
            )
        }
        time    = { check_max( 30.h      * task.attempt, 'time'    ) }
    }

    withName: SAMTOOLS_MARKDUP {
        cpus    = { check_max( 12    * 1, 'cpus'    ) }
        memory  = { check_max( 1.GB  * Math.ceil( (input.size() / 1e+9) / 4 ) * task.attempt, 'memory'  ) }
    }

    withName: COOLER_CLOAD {
        cpus   = { check_max( 16     * 1, 'cpus'    ) }
        memory = { check_max( 20.GB  * task.attempt, 'memory'  ) }
    }

    withName: MERQURYFK_MERQURYFK {
        cpus   = { check_max( 20        * 1, 'cpus'    ) }
        memory = { check_max( 100.GB    * task.attempt, 'memory'  ) }
    }

    withName: BUSCO_BUSCO {
        cpus   = { check_max( 16        * task.attempt, 'cpus'    ) }
        memory = { check_max( 50.GB     * task.attempt, 'memory'  ) }
        time   = { check_max( 20.h      * task.attempt, 'time'    ) }
    }

    // Large Genomes > 4Gb
    //withName: BUSCO_BUSCO {
    //    cpus   = { check_max( 30      * task.attempt, 'cpus'    ) }
    //    memory = { check_max( 100.GB  * task.attempt, 'memory'  ) }
    //    time   = { check_max( 300.h   * task.attempt, 'time'    ) }
    //}

    // Large Genomes > 4Gb
    withName: FASTK_FASTK {
        cpus   = { check_max( 8         * task.attempt, 'cpus'    ) }
        memory = { check_max( 100.GB    * task.attempt, 'memory'  ) }
    }

    //
    // GENERAL MODULE LIMITS
    //      Based on reports from SummaryStats
    //      Most of the final conversion modules barely use any resources
    withName: UCSC_BEDTOBIGBED {
        cpus   = { check_max( 1                         , 'cpus'    ) }
        memory = { check_max( 2.GB      * task.attempt  , 'memory'  ) }
    }

    withName: TABIX_BGZIPTABIX {
        cpus   = { check_max( 1                         , 'cpus'    ) }
        memory = { check_max( 1.GB      * Math.ceil( (input.size() / 2e+9) < 1 ? 1 : (input.size() / 2e+9)) * task.attempt  , 'memory'  ) }
    }

    //
    // SUBWORKFLOW: GAP_FINDER
    //      Based on reports from SummaryStats
    withName: GAP_LENGTH {
        cpus   = { check_max( 1                         , 'cpus'    ) }
        memory = { check_max( 100.MB    * task.attempt  , 'memory'  ) }
    }

    //
    // SUBWORKFLOW: HIC_MAPPING
    //
    withName: GET_PAIRED_CONTACT_BED {
        cpus    = { check_max( 10       * 1, 'cpus'                 ) }
        memory = { check_max( 10.GB     * task.attempt  , 'memory'  ) }
        //memory = { check_max( 1.GB      * Math.ceil( file.size() / 2e+9 )  * task.attempt  , 'memory'  ) }
        time    = { check_max( 30.h      * task.attempt, 'time'    ) }
    }

    //
    // SUBWORKFLOW: SYNTENY
    //
    withName: '.*:.*:SYNTENY:MINIMAP2_ALIGN' {
        cpus    = { check_max( 20       * 1, 'cpus'                 ) }
        memory  = { check_max( 1.1.GB   * Math.ceil( (reference.size() / 1e+9) * 30 )    * task.attempt, 'memory'    ) }
        time    = { check_max( 20.h     * task.attempt, 'time'      ) }
    }

    //
    // SUBWORKFLOW: REPEAT_DENSITY
    //

    withName: WINDOWMASKER_MKCOUNTS {
        cpus   = { check_max( 6                         , 'cpus'    ) }
        memory = { check_max( 1.5.GB    * Math.ceil( ref.size() / 1e+9 )    * task.attempt, 'memory'    ) }
        time   = { check_max( 10.h      * task.attempt  , 'time'    ) }
    }

    withName: WINDOWMASKER_USTAT {
        cpus   = { check_max( 1                         , 'cpus'    ) }
        memory = { check_max( 1.GB    * Math.ceil( ref.size() / 2e+9 )    * task.attempt, 'memory'    ) }
        time   = { check_max( 4.h       * task.attempt  , 'time'    ) }
    }

    withName: BEDTOOLS_INTERSECT {
        memory  = { check_max( 30.GB     * (task.attempt * task.attempt), 'memory'    ) }
    }

    withName: GENERATE_CRAM_CSV {
        cpus   = { check_max( 6                         , 'cpus'    ) }
        memory = { check_max( 30.GB      * task.attempt , 'memory'  ) }
        time   = { check_max( 10.h      * task.attempt  , 'time'    ) }
    }
}






